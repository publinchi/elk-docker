filter {
    if [type] == "CTS" or [type] == "CTS-Loaded" {
        grok {
            match => { "message" => "(?m)%{WORD:fecha} %{WORD:hora},%{WORD:ms} %{WORD:loglevel}\s*\[%{WORD:server}\]\[(?<thread>[^\]]+)\]\[%{WORD:class}\]\[(%{WORD:method})?\]\[(%{WORD:sessionId})?,(%{WORD:backEndId})?,(%{NUMBER:trn})?,(%{USER:user})?,(%{NUMBER:ssn})?\](?<message>(.|\r|\n)*)" }
            overwrite => ["message"]
        }
        if [fecha] and [hora] and [ms] {
            ruby {
                code => "event['month'] = event['fecha'][0..1]
                         event['day'] = event['fecha'][2..3]
                         event['hour'] = event['hora'][0..1]
                         event['minute'] = event['hora'][2..3]
                         event['second'] = event['hora'][4..5]"
            }
            mutate {
                add_field => {
                     "logdate" => "2016-%{month}-%{day} %{hour}:%{minute}:%{second}.%{ms}"
                }
                remove_field => ["fecha", "hora", "ms", "month", "day", "hour", "minute", "second"]
            }
            date {
                match => [ "[eventdata][logdate]", "YYYY-MM-dd HH:mm:ss.SSS" ] 
                target => "@timestamp"
            }
            mutate {
                remove_field => ["logdate"]
            }
        }
        grok {
            match => { "message" => "%{SPACE}COBISTrx-%{WORD:COBISTrx}%{SPACE}id=%{WORD:id}%{SPACE}totalTime=%{NUMBER:ms}\(ms\)" }
            tag_on_failure => [] 
        }
        grok {
            match => { "message" => "\[executeSP\]\(%{WORD:db}..%{WORD:sp}\)%{SPACE}-->%{NUMBER:ms}ms." }
            tag_on_failure => [] 
        }
        grok {
            match => { "message" => "%{SPACE}msg:%{SPACE}rpc:%{SPACE}%{WORD:db}..%{WORD:sp}%{SPACE}-%{SPACE}msgno:%{SPACE}%{NUMBER:msgno},%{SPACE}charMsg:%{SPACE}%{GREEDYDATA:charMsg}" }
            tag_on_failure => [] 
        }
        grok {
            match => { "message" => "%{SPACE}Respuesta de CTS:%{GREEDYDATA:xml}" }
            tag_on_failure => [] 
        }
        if [xml] {
            xml {
                store_xml => "false"
                source => "xml"
                remove_namespaces => "true"
                xpath =>["/CTSMessage/Data/ProcedureResponse/return/text()","CTSReturn","/CTSMessage/Data/ProcedureResponse/Message/text()","CTSMessage","/CTSMessage/Data/ProcedureResponse/Message/@type","CTSType","/CTSMessage/Data/ProcedureResponse/Message/@msgNo","CTSMsgNo"]
                remove_field => ["xml"]
            }
        }
    }	
}
